# sync_lib_tree.py
# 律：lib配下を「必要なものは作成、不要は削除」に同期します。
import os, sys, shutil
from pathlib import Path

# === 設定 ===
BASE_DIR = Path(r"C:\flutter_application_1\lib")   # 必要なら書き換え
DRY_RUN = False   # 最初はTrueで計画のみ。実行時はFalseに
# 削除対象から除外したい相対パス（ワイルドカードなし）
EXCLUDE = {
    ".gitkeep",  # 保護したいファイルがあれば追加
}

# 望ましいディレクトリ/ファイルツリー（相対パス）
DIRS = {
    "",  # lib直下
    "core",
    "l10n",
    "models",
    "providers",
    "services",
    "services/network",
    "services/storage",
    "services/notify",
    "services/export",
    "screens",
    "screens/dashboard",
    "screens/dashboard/widgets",
    "screens/plant_add_edit",
    "screens/plant_add_edit/widgets",
    "screens/plant_detail",
    "screens/plant_detail/widgets",
    "screens/stats",
    "screens/stats/widgets",
    "screens/settings",
    "widgets",
}

FILES = {
    # lib直下
    "main.dart",
    "router.dart",

    # core
    "core/constants.dart",
    "core/exceptions.dart",
    "core/result.dart",

    # models
    "models/plant.dart",
    "models/reading.dart",
    "models/notification_settings.dart",
    "models/stats_data.dart",

    # providers
    "providers/plants_provider.dart",
    "providers/plant_detail_provider.dart",
    "providers/notification_settings_provider.dart",
    "providers/stats_provider.dart",

    # services
    "services/network/network_service.dart",
    "services/network/default_network_service.dart",
    "services/storage/storage_service.dart",
    "services/storage/sp_storage_service.dart",
    "services/storage/secure_storage.dart",
    "services/notify/notification_service.dart",
    "services/notify/local_notification_service.dart",
    "services/export/export_service.dart",
    "services/export/csv_export_service.dart",

    # screens
    "screens/dashboard/dashboard_screen.dart",
    "screens/dashboard/widgets/plant_carousel_card.dart",
    "screens/dashboard/widgets/plant_stat_card.dart",
    "screens/dashboard/widgets/plant_grid_card.dart",
    "screens/dashboard/widgets/plant_list_item.dart",
    "screens/dashboard/widgets/section_header.dart",

    "screens/plant_add_edit/plant_add_edit_screen.dart",
    "screens/plant_add_edit/widgets/step_url_input.dart",
    "screens/plant_add_edit/widgets/step_credentials.dart",
    "screens/plant_add_edit/widgets/step_theme_icon.dart",

    "screens/plant_detail/plant_detail_screen.dart",
    "screens/plant_detail/widgets/generation_line_chart.dart",
    "screens/plant_detail/widgets/history_list.dart",

    "screens/stats/stats_screen.dart",
    "screens/stats/widgets/total_generation_chart.dart",
    "screens/stats/widgets/generation_by_plant_chart.dart",

    "screens/settings/notification_settings_screen.dart",

    # shared widgets
    "widgets/primary_button.dart",
    "widgets/setting_tile.dart",
    "widgets/empty_state.dart",
}

DART_STUB = """// Generated by sync_lib_tree.py
// file: {relpath}
"""

# === ロジック ===
def normalize_case(p: Path) -> Path:
    # Windowsでも一応正規化
    return Path(os.path.normpath(str(p)))

def plan_sync(base: Path):
    desired_dirs = {normalize_case(base / d) for d in DIRS}
    desired_files = {normalize_case(base / f) for f in FILES}

    # 既存を走査
    existing_dirs = set()
    existing_files = set()
    for root, dirs, files in os.walk(base):
        rpath = Path(root)
        existing_dirs.add(normalize_case(rpath))
        for f in files:
            existing_files.add(normalize_case(rpath / f))

    # 作成計画
    to_make_dirs = sorted([d for d in desired_dirs if not d.exists()], key=lambda p: len(str(p)))
    to_make_files = sorted([f for f in desired_files if not f.exists()], key=lambda p: len(str(p)))

    # 削除計画（EXCLUDEと望ましい集合を除外）
    def is_excluded(p: Path) -> bool:
        try:
            rel = p.relative_to(base).as_posix()
        except ValueError:
            return True
        return rel in EXCLUDE

    extra_files = sorted([f for f in existing_files
                          if f not in desired_files and not is_excluded(f)], key=lambda p: len(str(p)))
    # ディレクトリは「望ましい集合に含まれず、空になったら」削除
    extra_dirs = sorted([d for d in existing_dirs
                         if d not in desired_dirs and d != base and not is_excluded(d)],
                        key=lambda p: len(str(p)), reverse=True)

    return to_make_dirs, to_make_files, extra_files, extra_dirs

def ensure_parent(p: Path):
    p.parent.mkdir(parents=True, exist_ok=True)

def apply_plan(base: Path, to_make_dirs, to_make_files, extra_files, extra_dirs):
    print(f"Base: {base}")
    print("\n== Create Dirs ==")
    for d in to_make_dirs:
        print(f"+ DIR  {d}")
        if not DRY_RUN:
            d.mkdir(parents=True, exist_ok=True)

    print("\n== Create Files ==")
    for f in to_make_files:
        print(f"+ FILE {f}")
        if not DRY_RUN:
            ensure_parent(f)
            if not f.exists():
                f.write_text(DART_STUB.format(relpath=f.relative_to(base).as_posix()), encoding="utf-8")

    print("\n== Delete Files ==")
    for f in extra_files:
        print(f"- FILE {f}")
        if not DRY_RUN:
            try:
                f.unlink()
            except Exception as e:
                print(f"  ! skip {f}: {e}")

    print("\n== Delete Dirs (empty only) ==")
    for d in extra_dirs:
        # 空ディレクトリのみ削除
        try:
            if d.exists() and not any(d.iterdir()):
                print(f"- DIR  {d}")
                if not DRY_RUN:
                    d.rmdir()
        except Exception as e:
            print(f"  ! skip {d}: {e}")

def main():
    base = BASE_DIR
    if not base.exists():
        print(f"ERROR: BASE_DIR not found: {base}")
        sys.exit(1)
    to_make_dirs, to_make_files, extra_files, extra_dirs = plan_sync(base)

    print("===== SYNC PLAN (DRY_RUN=%s) =====" % DRY_RUN)
    print(f"Create: {len(to_make_dirs)} dirs, {len(to_make_files)} files")
    print(f"Delete: {len(extra_files)} files, {len(extra_dirs)} dirs (empty only)")

    apply_plan(base, to_make_dirs, to_make_files, extra_files, extra_dirs)

    if DRY_RUN:
        print("\n※ 反映するには DRY_RUN = False にして再実行してください。")
    else:
        print("\nDone.")

if __name__ == "__main__":
    main()
